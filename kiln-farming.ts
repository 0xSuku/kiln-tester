import { ethers } from 'ethers';
import * as fs from 'fs';

// 1) fundWallets -> Sends from wallet 0 to n the value of 0.1 ETH (a few minutes)
// 2) deployTenContracts -> Deploys 10 contracts for n accounts (a few minutes)
// 3) tenTimesTenTxs -> 10 calls to 10 contracts previously generated by me using deployBankContract (several minutes)
// 4) oneHundredTxs -> Sends from n to 0 x times the value of 0.000000001 ETH  (several hours)

const mnemonic = ""

const providerKiln = 'https://rpc.kiln.themerge.dev';
const provider_kiln = ethers.providers.getDefaultProvider(providerKiln);

const mainWallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/0`);
const mainAccount = mainWallet.connect(provider_kiln);

const maxPriorityFeePerGas = ethers.utils.parseUnits('2.1', 'gwei');
const maxFeePerGas = ethers.utils.parseUnits('2.1', 'gwei');
const gasObject = { maxFeePerGas, maxPriorityFeePerGas, gasLimit: 250000 };

const init = async () => {
    // await fundWallets();

    // await deployTenContracts();
    // await tenTimesTenTxs();
    // await oneHundredTxs(mainWallet.address);

    // Internal method to deploy banks
    // await deployBankContract();
    process.exit();
}

async function fundWallets() {
    for (let i = 1; i < 100; i++) {
        const wallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${i}`);
        let tx = {
            ...gasObject,
            to: wallet.address,
            value: ethers.utils.parseEther('0.1')
        }
        await mainAccount.sendTransaction(tx).then((txObj) => {
            console.log('https://explorer.kiln.themerge.dev/tx/' + txObj.hash)
        });
    }
}

async function deployTenContracts() {
    for (let account = 0; account < 100; account++) {
        const currentWallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${account}`);
        const currentAccount = currentWallet.connect(provider_kiln);

        const bytecode = fs.readFileSync(__dirname + '/contract-generic-bytecode.bin').toString();
        const abi = fs.readFileSync(__dirname + '/contract-generic-abi.json').toString();
        const createdContract = new ethers.ContractFactory(abi, bytecode, currentAccount);

        // Solo hago deploy de 10 porque come mucho eth, quizÃ¡s lo arregle
        for (let txAmount = 0; txAmount < 10; txAmount++) {
            const contract = await createdContract.deploy({ ...gasObject, gasLimit: 700000 });
            if (contract.deployTransaction) {
                console.log('Account: ' + account + ' https://explorer.kiln.themerge.dev/tx/' + contract.deployTransaction.hash);
            } else {
                console.log('nope');
            }
        }
    }
}

const bankAbi = fs.readFileSync(__dirname + '/contract-bank-abi.json').toString();
const banksAddresses = [
    '0x7F8DE0CaC9eF3fDD0E508696722CbeA451942218',
    '0x92a94acb306b1a5ee1e23594767864d75b112774',
    '0xd7a521a2e60f8570224eeb4742b6513499dd600e',
    '0xf72e9bd6128f477bbe28e03cc218372d27723fd3',
    '0x70fe328fa860ee2f13c0abd2dbd44e4a21bfad44',
    '0x93547b12b26291dbb8fbd534d8e76ac387ecd0db',
    '0x829d6239c9791347536b6d5b23849569773a196c',
    '0xe4b0b25fc5f5ded5e6560a4d4517b9e5615d1611',
    '0x97eda8f130536876f77027c407277625e0b8d6b2',
    '0xe5b30e1ac85b50565fbb97dcccc3505b92535722'
]

async function tenTimesTenTxs() {
    for (let account = 0; account < 100; account++) {
        const currentWallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${account}`);
        const currentAccount = currentWallet.connect(provider_kiln);

        for (let bankNumber = 0; bankNumber < banksAddresses.length; bankNumber++) {
            const bankAddress = banksAddresses[bankNumber];
            const bankContract = new ethers.Contract(bankAddress, bankAbi, currentAccount);

            // If it was called before, it will fail but nothing bad will happen
            const tx = await bankContract.createAcc(gasObject);
            console.log('Account: ' + account + ' | Create - https://explorer.kiln.themerge.dev/tx/' + tx.hash);

            for (let depositNumber = 0; depositNumber < 11; depositNumber++) {
                const tx = await bankContract.deposit({ ...gasObject, value: ethers.utils.parseEther('0.000000001') });
                console.log('Account: ' + account + ' | Deposit bank ' + bankNumber + ' - https://explorer.kiln.themerge.dev/tx/' + tx.hash);
            }
        }
    }
}

async function oneHundredTxs(to: string) {
    for (let account = 84; account < 100; account++) {
        const currentWallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/${account}`);
        const currentAccount = currentWallet.connect(provider_kiln);
        for (let txAmount = 0; txAmount < 120; txAmount++) {
            let tx = {
                ...gasObject,
                to,
                value: ethers.utils.parseEther('0.000000001')
            }
            await currentAccount.sendTransaction(tx).then((txObj) => {
                console.log('Account: ' + account + ' https://explorer.kiln.themerge.dev/tx/' + txObj.hash)
            });
        }
    }
}




// Do not use, it's to generate the reusable 10 contracts
async function deployBankContract() {
    const currentWallet = ethers.Wallet.fromMnemonic(mnemonic, `m/44'/60'/0'/0/0`);
    const currentAccount = currentWallet.connect(provider_kiln);

    const bytecode = fs.readFileSync(__dirname + '/contract-bank-bytecode.bin').toString();
    const abi = fs.readFileSync(__dirname + '/contract-bank-abi.json').toString();
    const createdContract = new ethers.ContractFactory(abi, bytecode, currentAccount);

    for (let txAmount = 0; txAmount < 10; txAmount++) {
        const contract = await createdContract.deploy({ ...gasObject, gasLimit: 2500000 });
        if (contract.deployTransaction) {
            console.log('https://explorer.kiln.themerge.dev/tx/' + contract.deployTransaction.hash);
        } else {
            console.log('nope');
        }
    }
}

init();

